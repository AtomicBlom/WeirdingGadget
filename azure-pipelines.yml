# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

pool:
  vmImage: 'windows-latest'

variables:
  revision: $[counter('release-number', 0)]
  mod_jar_prefix: 'weirdinggadget'
  blob_bucket: 'WeirdingGadget'
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
  - task: Cache@2
    inputs:
      key: 'gradle | "$(Agent.OS)" | build.gradle | dependency.properties | src/main/resources/META-INF/accesstransformer.cfg'
      restoreKeys: gradle
      path: $(GRADLE_USER_HOME)
    displayName: Gradle build cache

  - powershell: |
      (Get-Content ./gradle.properties).Split([Environment]::NewLine) | % {
          $kvp = $_.Split('=')
          if ($kvp.Count -gt 1) {
              $key = $kvp[0] -replace "\.", "_";
              $value = $kvp[1];
              Write-Host "##vso[task.setvariable variable=javaprops_$key]$value"
          }
      }

      (Get-Content ./dependency.properties).Split([Environment]::NewLine) | % {
          $kvp = $_.Split('=')
          if ($kvp.Count -gt 1) {
              $key = $kvp[0] -replace "\.", "_";
              $value = $kvp[1];
              Write-Host "##vso[task.setvariable variable=javaprops_$key]$value"
          }
      }

  - powershell: |
      $var = (gci env:*).GetEnumerator() | Sort-Object Name
      $out = ""
      Foreach ($v in $var) {$out = $out + "`t{0,-28} = {1,-28}`n" -f $v.Name, $v.Value}

      $fileName = "$env:BUILD_ARTIFACTSTAGINGDIRECTORY/variables.md"
      write-output "dump variables on $fileName"

      set-content $fileName $out

      write-output "##vso[task.addattachment type=Distributedtask.Core.Summary;name=Environment Variables;]$fileName"
    displayName: Dump Variables
    condition: eq(variables['system.debug'], 'true')

  - task: Gradle@2
    inputs:
      workingDirectory: ''
      options: '-PCIRevision=$(javaprops_mod_version).$(revision) -PCIType=RELEASE'
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'build'

  - script: |
      # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
      ./gradlew --stop
    displayName: Kill Daemon

  - task: CopyFiles@2
    inputs:
      sourceFolder: './build/libs/'
      contents: '$(mod_jar_prefix)-*.jar'
      targetFolder: $(build.artifactStagingDirectory)
    condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts to VSTS'
    condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

  - task: AzureFileCopy@4
    inputs:
      SourcePath: '$(build.artifactStagingDirectory)\*'
      azureSubscription: 'Artifact Storage'
      Destination: 'AzureBlob'
      storage: 'modartifacts'
      ContainerName: '$(blob_bucket)'
      blobPrefix: '$(javaprops_minecraft_version)'
    condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))